<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_454869_exception_exception_requests</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ExcReq Check Duration</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions>x_454869_exception.exception_requests_user</role_conditions>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

// rightnow stores the current time
	var rightnow = new GlideDateTime();
	// Create a GlideDateTime object for the When needed date
	var requestedduration = new GlideDateTime(current.u_requested_duration);
	
	// If the When needed date is before rightnow, do not write the record to the database
	// Output an error message to the screen
	if(whenNeeded.before(requestedduration)){
		gs.addErrorMessage("End date cannot be in the past.  Your request has not been saved to the database.");
		current.setAbortAction(true);
	}
	// Challenge:  Do not allow same-day requests
	// Get the date portion of rightnow and whenNeeded (no timestamp)
	var today = rightnow.getLocalDate();
	today.addMonhsLocalTime(3);
	var istoday = requestedduration.getLocalDate();
	// Compare today and istoday to see if they are the same day
	if(today.before(istoday)){
		gs.addErrorMessage("Maximum duration of exception is 3 months.");
		current.setAbortAction(true);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-03-30 05:48:06</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b8b6476edb3b0010f3402706ca961913</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>ExcReq Check Duration</sys_name>
        <sys_overrides/>
        <sys_package display_value="Exception Management" source="x_454869_exception">90da3a26db3b0010f3402706ca96192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Exception Management">90da3a26db3b0010f3402706ca96192f</sys_scope>
        <sys_update_name>sys_script_b8b6476edb3b0010f3402706ca961913</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-03-30 06:59:36</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=b8b6476edb3b0010f3402706ca961913"/>
</record_update>
